// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package thriftmodel

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// Attributes:
//  - Int32Value
//  - StringValue
//  - BoolValue
type SimpleStruct struct {
  Int32Value *int32 `thrift:"int32Value,1" db:"int32Value" json:"int32Value,omitempty"`
  StringValue *string `thrift:"stringValue,2" db:"stringValue" json:"stringValue,omitempty"`
  BoolValue *bool `thrift:"boolValue,3" db:"boolValue" json:"boolValue,omitempty"`
}

func NewSimpleStruct() *SimpleStruct {
  return &SimpleStruct{}
}

var SimpleStruct_Int32Value_DEFAULT int32
func (p *SimpleStruct) GetInt32Value() int32 {
  if !p.IsSetInt32Value() {
    return SimpleStruct_Int32Value_DEFAULT
  }
return *p.Int32Value
}
var SimpleStruct_StringValue_DEFAULT string
func (p *SimpleStruct) GetStringValue() string {
  if !p.IsSetStringValue() {
    return SimpleStruct_StringValue_DEFAULT
  }
return *p.StringValue
}
var SimpleStruct_BoolValue_DEFAULT bool
func (p *SimpleStruct) GetBoolValue() bool {
  if !p.IsSetBoolValue() {
    return SimpleStruct_BoolValue_DEFAULT
  }
return *p.BoolValue
}
func (p *SimpleStruct) IsSetInt32Value() bool {
  return p.Int32Value != nil
}

func (p *SimpleStruct) IsSetStringValue() bool {
  return p.StringValue != nil
}

func (p *SimpleStruct) IsSetBoolValue() bool {
  return p.BoolValue != nil
}

func (p *SimpleStruct) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SimpleStruct)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Int32Value = &v
}
  return nil
}

func (p *SimpleStruct)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.StringValue = &v
}
  return nil
}

func (p *SimpleStruct)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.BoolValue = &v
}
  return nil
}

func (p *SimpleStruct) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SimpleStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SimpleStruct) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetInt32Value() {
    if err := oprot.WriteFieldBegin("int32Value", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:int32Value: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Int32Value)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.int32Value (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:int32Value: ", p), err) }
  }
  return err
}

func (p *SimpleStruct) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetStringValue() {
    if err := oprot.WriteFieldBegin("stringValue", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:stringValue: ", p), err) }
    if err := oprot.WriteString(string(*p.StringValue)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.stringValue (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:stringValue: ", p), err) }
  }
  return err
}

func (p *SimpleStruct) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetBoolValue() {
    if err := oprot.WriteFieldBegin("boolValue", thrift.BOOL, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:boolValue: ", p), err) }
    if err := oprot.WriteBool(bool(*p.BoolValue)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.boolValue (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:boolValue: ", p), err) }
  }
  return err
}

func (p *SimpleStruct) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SimpleStruct(%+v)", *p)
}

// Attributes:
//  - ByteArray
//  - Int64Array
//  - StringArray
//  - StructArray
//  - IntStructMap
type Payload struct {
  ByteArray []byte `thrift:"byteArray,1" db:"byteArray" json:"byteArray,omitempty"`
  Int64Array []int64 `thrift:"int64Array,2" db:"int64Array" json:"int64Array,omitempty"`
  StringArray []string `thrift:"stringArray,3" db:"stringArray" json:"stringArray,omitempty"`
  StructArray []*SimpleStruct `thrift:"structArray,4" db:"structArray" json:"structArray,omitempty"`
  IntStructMap map[int32]*SimpleStruct `thrift:"intStructMap,5" db:"intStructMap" json:"intStructMap,omitempty"`
}

func NewPayload() *Payload {
  return &Payload{}
}

var Payload_ByteArray_DEFAULT []byte

func (p *Payload) GetByteArray() []byte {
  return p.ByteArray
}
var Payload_Int64Array_DEFAULT []int64

func (p *Payload) GetInt64Array() []int64 {
  return p.Int64Array
}
var Payload_StringArray_DEFAULT []string

func (p *Payload) GetStringArray() []string {
  return p.StringArray
}
var Payload_StructArray_DEFAULT []*SimpleStruct

func (p *Payload) GetStructArray() []*SimpleStruct {
  return p.StructArray
}
var Payload_IntStructMap_DEFAULT map[int32]*SimpleStruct

func (p *Payload) GetIntStructMap() map[int32]*SimpleStruct {
  return p.IntStructMap
}
func (p *Payload) IsSetByteArray() bool {
  return p.ByteArray != nil
}

func (p *Payload) IsSetInt64Array() bool {
  return p.Int64Array != nil
}

func (p *Payload) IsSetStringArray() bool {
  return p.StringArray != nil
}

func (p *Payload) IsSetStructArray() bool {
  return p.StructArray != nil
}

func (p *Payload) IsSetIntStructMap() bool {
  return p.IntStructMap != nil
}

func (p *Payload) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Payload)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ByteArray = v
}
  return nil
}

func (p *Payload)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.Int64Array =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 int64
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.Int64Array = append(p.Int64Array, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Payload)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.StringArray =  tSlice
  for i := 0; i < size; i ++ {
var _elem1 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem1 = v
}
    p.StringArray = append(p.StringArray, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Payload)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*SimpleStruct, 0, size)
  p.StructArray =  tSlice
  for i := 0; i < size; i ++ {
    _elem2 := &SimpleStruct{}
    if err := _elem2.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
    }
    p.StructArray = append(p.StructArray, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Payload)  ReadField5(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[int32]*SimpleStruct, size)
  p.IntStructMap =  tMap
  for i := 0; i < size; i ++ {
var _key3 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key3 = v
}
    _val4 := &SimpleStruct{}
    if err := _val4.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val4), err)
    }
    p.IntStructMap[_key3] = _val4
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Payload) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Payload"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Payload) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetByteArray() {
    if err := oprot.WriteFieldBegin("byteArray", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:byteArray: ", p), err) }
    if err := oprot.WriteBinary(p.ByteArray); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.byteArray (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:byteArray: ", p), err) }
  }
  return err
}

func (p *Payload) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetInt64Array() {
    if err := oprot.WriteFieldBegin("int64Array", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:int64Array: ", p), err) }
    if err := oprot.WriteListBegin(thrift.I64, len(p.Int64Array)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Int64Array {
      if err := oprot.WriteI64(int64(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:int64Array: ", p), err) }
  }
  return err
}

func (p *Payload) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetStringArray() {
    if err := oprot.WriteFieldBegin("stringArray", thrift.LIST, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:stringArray: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.StringArray)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.StringArray {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:stringArray: ", p), err) }
  }
  return err
}

func (p *Payload) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetStructArray() {
    if err := oprot.WriteFieldBegin("structArray", thrift.LIST, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:structArray: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.StructArray)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.StructArray {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:structArray: ", p), err) }
  }
  return err
}

func (p *Payload) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetIntStructMap() {
    if err := oprot.WriteFieldBegin("intStructMap", thrift.MAP, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:intStructMap: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(p.IntStructMap)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.IntStructMap {
      if err := oprot.WriteI32(int32(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:intStructMap: ", p), err) }
  }
  return err
}

func (p *Payload) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Payload(%+v)", *p)
}

